@attribute [Route(PagePathUrl)]
@attribute [AllowAnonymous]
@inject OpenTelemetry.Trace.Tracer Tracer

<h3>CreateUser</h3>

<form action="user/changepassword" method="post">
    <div class="productdata" style="display:table">
        <div class="productrowdata">
            <label asp-for="oldPassword">oldPassword</label>
            <input asp-for="oldPassword" type=@oldPasswordType name="oldPassword" />
            <span asp-validation-for="oldPassword" class="text-danger"></span>
            <InputCheckbox @bind-Value=showOldPassword />
        </div>
        <div class="productrowdata">
            <label asp-for="newPassword">newPassword</label>
            <input asp-for="newPassword" type=@newPasswordType name="newPassword" />
            <span asp-validation-for="newPassword" class="text-danger"></span>
            <InputCheckbox @bind-Value=showNewPassword />
        </div>
        <div class="productrowdata">
            <label asp-for="newPasswordRepeat">new password repeat</label>
            <input asp-for="newPasswordRepeat" type=@newPasswordRepeatType name="newPasswordRepeat" />
            <span asp-validation-for="newPasswordRepeat" class="text-danger"></span>
            <InputCheckbox @bind-Value=showNewPasswordRepeat />
        </div>
        <button type="submit" >Change</button>
    </div>
</form>

@code {
    public const string PagePathUrl = "/changepassword";
    private bool showOldPassword { get; set; }
    private string oldPasswordType => showOldPassword ? "text" : "password";
    private bool showNewPassword { get; set; }
    private string newPasswordType => showNewPassword ? "text" : "password";
    private bool showNewPasswordRepeat { get; set; }
    private string newPasswordRepeatType => showNewPasswordRepeat ? "text" : "password";

    protected override async Task OnInitializedAsync()
    {
        using var span = Tracer.StartActiveSpan($"{nameof(CreateUser)}_{nameof(OnInitializedAsync)}");
        await base.OnInitializedAsync();
    }
    protected override async Task OnParametersSetAsync()
    {
        using var span = Tracer.StartActiveSpan($"{nameof(CreateUser)}_{nameof(OnParametersSetAsync)}");

        await Task.CompletedTask;
    }

}
