@using eShopping.Common.SimpleComponent
@if (ProductsImageFolders == null ||
   ProductBrands == null ||
   ProductTypes == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div style="display: flex;justify-content: space-between;flex-wrap: wrap;" @attributes=InputAttributes>
        <EditForm Model="@ModelProduct" OnValidSubmit="(ValidSubmit)" FormName="CreateNewProduct">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="productdata">
                <div style="max-width:50%">
                    <SimpleInputText CssClass="productrowdata"
                                     CssClassInvalid="invalidInput"
                                     Value=@ModelProduct!.Name
                                     ValueExpression="@(()=>ModelProduct!.Name)"
                                     ValueChanged="@(x => ModelProduct!.Name = x)"
                                     Caption="Name" />
                    <SimpleInputText CssClass="productrowdata"
                                     CssClassInvalid="invalidInput"
                                     @bind-Value="ModelProduct!.Summary"
                                     Caption="Summary" />
                    <SimpleInputText CssClass="productrowdata"
                                     CssClassInvalid="invalidInput"
                                     @bind-Value="ModelProduct!.Description"
                                     Caption="Description" />
                    <SimpleInputNumber CssClass="productrowdata"
                                       CssClassInvalid="invalidInput"
                                       @bind-Value="ModelProduct!.Price"
                                       Caption="Price" />
                    <SimpleInputText CssClass="productrowdata"
                                     CssClassInvalid="invalidInput"
                                     @bind-Value="ModelProduct!.ImageFileName"
                                     Caption="ImageFileName" />
                    <SimpleInputSelect CssClass="productrowdata"
                                       CssClassInvalid="invalidInput"
                                       @bind-Value="ModelProduct!.ImageDirectory"
                                       Caption="ImageFolder"
                                       ValueOptions="@(ProductsImageFolders.ToDictionary(x => x.Directory, x => x.Directory))"
                                       AdditionalValidationProperties="@(new List<FieldIdentifier>() {
                                            new FieldIdentifier(ModelProduct, nameof(ModelProduct.ImageDirectoryId)),})"
                                       AddEmptyValueOption=@true>
                    </SimpleInputSelect>
                    <SimpleInputSelect CssClass="productrowdata"
                                       CssClassInvalid="invalidInput"
                                       @bind-Value="ModelProduct!.BrandName"
                                       Caption="Brand"
                                       ValueOptions="@(ProductBrands.ToDictionary(x => x.Name, x => x.Name))"
                                       AdditionalValidationProperties="@(new List<FieldIdentifier>() {
                                            new FieldIdentifier(ModelProduct, nameof(ModelProduct.BrandId)),})"
                                       AddEmptyValueOption=@true>
                    </SimpleInputSelect>
                    <SimpleInputSelect CssClass="productrowdata"
                                       CssClassInvalid="invalidInput"
                                       @bind-Value="ModelProduct!.TypeName"
                                       Caption="Type"
                                       ValueOptions="@(ProductTypes.ToDictionary(x => x.Name, x => x.Name))"
                                       AdditionalValidationProperties="@(new List<FieldIdentifier>() {
                                            new FieldIdentifier(ModelProduct, nameof(ModelProduct.TypeId)),})"
                                       AddEmptyValueOption=@true>
                    </SimpleInputSelect>
                </div>
            </div>
            <button type="submit">Submit</button>
        </EditForm>
        <!--
        <EditForm EditContext="@EditContext" OnValidSubmit="(ValidSubmit)" FormName="CreateNewProduct">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="productdata">
                <div style="max-width:50%">
                    <SimpleInputText CssClass="productrowdata"
                                     CssClassInvalid="invalidInput"
                                     Value=@NewProduct!.Name
                                     ValueExpression="@(()=>NewProduct!.Name)"
                                     ValueChanged="@(x => NewProduct!.Name = x)"
                                     Caption="Name"/>
                    <SimpleInputText CssClass="productrowdata"
                                     CssClassInvalid="invalidInput"
                                     @bind-Value="NewProduct!.Summary"
                                     Caption="Summary"/>
                    <SimpleInputText CssClass="productrowdata"
                                     CssClassInvalid="invalidInput"
                                     @bind-Value="NewProduct!.Description"
                                     Caption="Description" />
                    <SimpleInputNumber CssClass="productrowdata"
                                       CssClassInvalid="invalidInput"
                                       @bind-Value="NewProduct!.Price"
                                       Caption="Price" />
                    <SimpleInputText CssClass="productrowdata"
                                     CssClassInvalid="invalidInput"
                                     @bind-Value="NewProduct!.ImageFileName"
                                     Caption="ImageFileName" />
                    <SimpleInputSelect CssClass="productrowdata"
                                       CssClassInvalid="invalidInput"
                                       Value=@NewProduct.ImageFileDirectory.Directory
                                       ValueExpression="@(()=>NewProduct.ImageFileDirectory.Directory)"
                                       ValueChanged="@(x => 
                                       { 
                                            NewProduct!.ImageFileDirectory = ProductsImageFolders.FirstOrDefault(pif => pif.Directory == x) ?? new Catalog.Core.Entities.ImageFileDirectory();
                                            NewProduct!.ImageFileID = NewProduct!.ImageFileDirectory?.Id ?? 0;
                                       })"
                                       ValueOptions="@(ProductsImageFolders.ToDictionary(x => x.Directory, x => x.Directory))"
                                       Caption="ImageFolder"
                                       AdditionalValidationProperties="@(new List<FieldIdentifier>() {FieldIdentifier.Create(() => NewProduct!.ImageFileID)})"
                                       AddEmptyValueOption=@true>
                    </SimpleInputSelect>
                    <SimpleInputSelect CssClass="productrowdata"
                                       CssClassInvalid="invalidInput"
                                       Value=@NewProduct.Brand.Name
                                       ValueExpression="@(()=>NewProduct.Brand!.Name)"
                                       ValueOptions="@(ProductBrands.ToDictionary(x => x.Name, x => x.Name))"
                                       ValueChanged="@(x =>
                                       {
                                            NewProduct!.Brand = ProductBrands.FirstOrDefault(pif => pif.Name == x) ?? new Catalog.Core.Entities.ProductBrand();
                                            NewProduct!.BrandID = NewProduct!.Brand?.Id ?? 0;
                                       })"
                                       Caption="Brand"
                                       AdditionalValidationProperties="@(new List<FieldIdentifier>() {
                                            new FieldIdentifier(NewProduct, nameof(NewProduct.BrandID)),})"
                                       AddEmptyValueOption=@true>
                    </SimpleInputSelect>
                    <SimpleInputSelect CssClass="productrowdata"
                                       CssClassInvalid="invalidInput"
                                       Value=@NewProduct.Type.Name
                                       ValueExpression="@(()=>NewProduct.Type.Name)"
                                       ValueChanged="@(x =>
                                       {
                                            NewProduct!.Type = ProductTypes.FirstOrDefault(pif => pif.Name == x) ?? new Catalog.Core.Entities.ProductType();
                                            NewProduct!.TypeID = NewProduct!.Type?.Id ?? 0;
                                       })"
                                       ValueOptions="@(ProductTypes.ToDictionary(x => x.Name, x => x.Name))"
                                       Caption="Type"
                                       AdditionalValidationProperties="@(new List<FieldIdentifier>() {FieldIdentifier.Create(() => NewProduct!.TypeID)})"
                                       AddEmptyValueOption=@true>
                    </SimpleInputSelect>
                </div>
            </div>
            <button type="submit">Submit</button>
        </EditForm>
        -->
        <div>
            <div>
                @if (SelectedImageFolder != null)
                {
                    <InputSelect TValue=string
                                 Value=SelectedImageFolder.Directory
                                 ValueExpression="(()=>SelectedImageFolder.Directory)"
                                 ValueChanged="(x => SelectedImageFolder = ProductsImageFolders.FirstOrDefault(pif => pif.Directory == x))">
                        @foreach (var imageFolder in ProductsImageFolders)
                        {
                            <option value=@imageFolder.Directory>@imageFolder.Directory</option>
                        }

                        <option value=@ProductsImageFoldersOptionCreateNew>@ProductsImageFoldersOptionCreateNew</option>
                    </InputSelect>
                }
                else
                {
                    <InputText class="InputBoxComboBox"
                               Value=@NewImageFolder
                               ValueExpression="(()=>NewImageFolder)"
                               ValueChanged="((x)=>NewImageFolder = x)">
                    </InputText>
                    <button @onclick="(async _ => await HandleOnClickAddImageLocationAsync())">
                        Create
                    </button>
                    <button @onclick="(async _ => SelectedImageFolder = ProductsImageFolders.FirstOrDefault())">
                        Cancel
                    </button>
                }
            </div>
            <div>
                <InputFile OnChange="(async inputFileChange => await HandleOnChangeUploadBitmapAsync(inputFileChange))" accept="image/*" />
            </div>
            @if (InputFileSource != null)
            {
                <InputText class="InputBoxComboBox"
                           Value=@FileNameTarget
                           ValueExpression="(()=>FileNameTarget)"
                           ValueChanged="((x)=>FileNameTarget = x)">
                </InputText>
                <div>
                    <button @onclick="(async _ => await HandleUploadBitmapAsync())" accept="image/*">
                        Upload file
                    </button>
                </div>
            }
        </div>
    </div>
    <hr>
    <div>
        <ProductBrandCreate></ProductBrandCreate>
    </div>
    <hr>
    <div>
        <ProductTypeCreate></ProductTypeCreate>
    </div>
}


